#!/usr/bin/python3

#include <stdio.h>
#include <stdlib.h>

// Definition of a singly linked list node
typedef struct listint_t {
    int data;
    struct listint_t* next;
} listint_t;

// Function to reverse a linked list
listint_t* reverse(listint_t* head) {
    listint_t* prev = NULL;
    listint_t* current = head;
    listint_t* next = NULL;
    
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    
    return prev;
}

// Function to check if a linked list is a palindrome
int is_palindrome(listint_t** head) {
    if (*head == NULL || (*head)->next == NULL) {
        return 1; // An empty list or a list with one element is a palindrome
    }
    
    listint_t* slow = *head;
    listint_t* fast = *head;
    listint_t* prev_slow = *head;
    listint_t* second_half = NULL;
    int is_pal = 1; // Assume the list is a palindrome initially
    
    // Find the middle of the linked list using slow and fast pointers
    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        prev_slow = slow;
        slow = slow->next;
    }
    
    // If the list has odd number of elements, move slow pointer to the next element
    if (fast != NULL) {
        slow = slow->next;
    }
    
    // Reverse the second half of the linked list
    second_half = reverse(slow);
    
    // Compare the first half with the reversed second half
    listint_t* first_half = *head;
    while (second_half != NULL) {
        if (first_half->data != second_half->data) {
            is_pal = 0;
            break;
        }
        first_half = first_half->next;
        second_half = second_half->next;
    }
    
    // Restore the original list by reversing the reversed second half
    prev_slow->next = reverse(reverse(slow));
    
    return is_pal;
}

int main() {
    // Test the is_palindrome function here
    listint_t* head = NULL;
    // Build your linked list here
    int result = is_palindrome(&head);
    if (result) {
        printf("The linked list is a palindrome.\n");
    } else {
        printf("The linked list is not a palindrome.\n");
    }
    
    return 0;
}

